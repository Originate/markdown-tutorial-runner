#!/usr/bin/env bash

# DETERMINES TEST COVERAGE

set -e

# copies the given directory into .nyc_output,
# while removing irrelevant entries that trip up nyc
mergeAndCleanseDir() {
  srcDir=$1
  for srcPath in $srcDir/*.json; do
    fileName=$(basename $srcPath)
    content=$(cat $srcPath)
    if [ "$content" != "{}" ]; then
      echo Copying $srcPath
      targetpath=".nyc_output/$fileName"
      node bin/cleanse-coverage.js $srcPath > $targetpath
    fi
  done
}


# prepare
rm -rf dist
rm -rf .nyc_output*
bin/build-coverage

# test coverage for unit tests
BABEL_ENV=test_coverage ./node_modules/.bin/nyc ./node_modules/.bin/mocha "test/**/*.js" --reporter dot
mv .nyc_output .nyc_output_tests

# test coverage for API specs
BABEL_ENV=test_coverage NODE_ENV=test EXOSERVICE_TEST_DEPTH=API nyc cucumber-js --tags '(not @clionly) and (not @todo)' "$@"
mv .nyc_output .nyc_output_api

# test coverage for CLI specs
NODE_ENV=coverage EXOSERVICE_TEST_DEPTH=CLI node_modules/.bin/cucumber-js --tags '(not @apionly) and (not @todo)' "$@"

# test coverage for the self-check
BABEL_ENV=test_coverage ./node_modules/.bin/nyc ./node_modules/.bin/mocha "test/**/*.js" --reporter dot
mv .nyc_output .nyc_output_text_run

# merge coverage data
mkdir .nyc_output
mergeAndCleanseDir .nyc_output_tests
mergeAndCleanseDir .nyc_output_api
for dirPath in .nyc_output_cli/*; do
  mergeAndCleanseDir $dirPath
done
mergeAndCleanseDir .nyc_output_text_run

# generate coverage report
nyc report --reporter=lcov
echo "open 'file://$(pwd)/coverage/lcov-report/index.html' in your browser"
